package com.ezen.myProject.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ezen.myProject.domain.BoardVO;
import com.ezen.myProject.domain.UserVO;
import com.ezen.myProject.repository.UserDAO;
import com.ezen.myProject.service.BoardService;
import com.ezen.myProject.service.UserService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/brd/*")
@Controller
public class BoardController {
	
	@Inject
	private BoardService bsv;
	@Inject
	private UserDAO udao;
	
	
	@GetMapping("/register")
	public String boardRegisterGet() {
		return "/board/register";
	}
	
	@PostMapping("/register")
	public String register(BoardVO bvo, RedirectAttributes reAttr) {
		log.info(bvo.toString());
		
		int isOk=bsv.register(bvo);
//		reAttr.addFlashAttribute() : 일회성
		reAttr.addFlashAttribute("msg", isOk>0?"1":"0");
		log.info("board register >> " + (isOk>0?"성공":"실패"));
		return "redirect:/brd/list";
	}
	
	@GetMapping("/list")
	public String list(Model model) {
		List<BoardVO> list=bsv.getList();
		model.addAttribute("list", list);
		return "/board/list";
	}
	
	@GetMapping("/detail")
	public String detail(Model model, @RequestParam("bno")int bno) {
		int isOk=bsv.updateReadCount(bno);
		log.info(isOk>0?"readcount 성공":"readcount 실패");
		BoardVO bvo=bsv.getDetail(bno);
		model.addAttribute("bvo", bvo);
		return "/board/detail";
	}
	
	/*
	 만약에 /brd/ 형태가 아니라 /board/* 형태로 mapping 하는 경우 경로가 같으면 void로 작성하고 return 안 적어도 됨
	 @GetMapping({"/detail","/modify"})
	 public void detail(Model model, @RequestParam("bno")int bno){
	 	int isOk=bsv.updateReadCount(bno);
		log.info(isOk>0?"readcount 성공":"readcount 실패");
		BoardVO bvo=bsv.getDetail(bno);
		model.addAttribute("bvo", bvo);
	 }
	 */
	
	@GetMapping("/modify")
	public String modifyGet(Model model, @RequestParam("bno")int bno) {
		BoardVO bvo=bsv.getDetail(bno);
		model.addAttribute("bvo", bvo);
		return "/board/modify";
	}
	
	//insert, update, delete 한 후 redirect 처리 -> 해당 데이터를 반영하여 처리하는 역할
	@PostMapping("/modify")
	public String modifyPost(BoardVO bvo, RedirectAttributes reAttr) {
		//writer가 같은 경우에만 수정 가능
		UserVO user=udao.getUser(bvo.getWriter());
		
		int isOk=bsv.modifyBoard(bvo, user);
		log.info(isOk>0?"modify 성공":"modify 실패");
		bvo=bsv.getDetail(bvo.getBno());
//		model.addAttribute("bvo", bvo);
		reAttr.addAttribute("bno", bvo.getBno());
		return "redirect:/brd/detail";
//		return "/board/detail";
		//RedirectAttributes 사용할거면 addAttribute 사용하지 말고 return으로 바로 bno 달고 가기
		//return "redirect:/brd/detail?bno="+bvo.getBno();
	}
	
	@GetMapping("/remove")
	public String removeGet(RedirectAttributes reAttr, @RequestParam("bno")int bno) {
		int isOk=bsv.removeBoard(bno);
		log.info(isOk>0?"remove 성공":"remove 실패");
		reAttr.addFlashAttribute("msg", (isOk>0?"1":"2"));
		return "redirect:/brd/list";
	}
	
}
