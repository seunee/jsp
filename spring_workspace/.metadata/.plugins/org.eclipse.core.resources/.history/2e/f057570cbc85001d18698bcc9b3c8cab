package com.ezen.myProject.handler;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.apache.tika.Tika;
import org.joda.time.LocalDate;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.ezen.myProject.domain.FileVO;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnails;

@Slf4j
@AllArgsConstructor
@Component
public class FileHandler {
	private final String UP_DIR = "D:\\_javaweb\\_java\\fileUpload";
	
	public List<FileVO> uploadFiles(MultipartFile[] files){
		//파일 경로 설정
		LocalDate date=LocalDate.now();
		log.info("date>>>> "+date);
		String today=date.toString(); //오늘 날짜를 스트링으로 변환 -> 2022-12-27, 하이픈을 파일 구분자로 변경
		today=today.replace("-", File.separator);
		
		File folders=new File(UP_DIR,today); //UP_DIR 뒤에 하위로 today로 생성된 폴더
		
		//폴더가 있으면 생성하지 않고 없으면 폴더를 생성함
		if(!folders.exists()) {
			folders.mkdirs();	//생성
		}
		
		List<FileVO> fList=new ArrayList<FileVO>();
		for(MultipartFile file : files) {
			FileVO fvo=new FileVO();
			fvo.setSave_dir(folders.toString());
			fvo.setFile_size(file.getSize());
			
			String originalFileName=file.getOriginalFilename();
			log.info("originalFileName>>>> "+originalFileName);
			
			//실제 파일명만 추출해서 파일명 설정(경로 제외)
			String onlyFileName=originalFileName.substring(originalFileName.lastIndexOf("\\")+1);
			log.info("onlyFileName>>>> "+onlyFileName);
			fvo.setFile_name(onlyFileName);
			
			//uuid 설정
			UUID uuid=UUID.randomUUID();
			fvo.setUuid(uuid.toString());
			//여기까지는 fvo에 저장할 파일의 정보를 ㄹ생성해서 set(타입, bno, reg_at 제외)
			
			//디스크에 저장할 파일 객체 생성
			String fullFileName=uuid.toString()+"_"+onlyFileName;
			File storeFile=new File(folders, fullFileName);
			try {
				file.transferTo(storeFile); //원본 객체를 저장하기 위한 형태의 객체로 복사
				if(isImageFile(storeFile)) {
					fvo.setFile_type(1);
					File thumbnail=new File(folders, uuid.toString()+"_th_"+onlyFileName);
					Thumbnails.of(storeFile).size(75, 75).toFile(thumbnail);
				}
			} catch (Exception e) {
				log.info(">>>File 생성 오류");
				e.printStackTrace();
			}
		}
		
		return fList;
	}
	
	//이미지 파일인지 아닌지 체크
	private boolean isImageFile(File storeFile) throws IOException {
		String mimeType=new Tika().detect(storeFile);	// image/png, image/jpg
		return mimeType.startsWith("image")? true:false;
	}
	
}
